package {		import br.com.stimuli.loading.BulkLoader;    import br.com.stimuli.loading.BulkProgressEvent;		import gs.TweenLite;		import fl.containers.ScrollPane;	import fl.controls.ProgressBar;	import fl.events.ScrollEvent;	import flash.display.*;	import flash.net.URLRequest;	import flash.events.*;	import flash.text.*;	import fl.motion.easing.*;	public class nerdstream extends Sprite {		// class constants		private var _DOMAIN:String = "http://yankee.sierrabravo.net/";				// image size data		private var _SHOTWIDTH:Number = 220;		private var _SHOTHEIGHT:Number = 165;				private var _HEADERHEIGHT:Number = 101;				private var _loader:BulkLoader = new BulkLoader("nerdStreamImages");		private var _sp:ScrollPane;		private var _imageArea:MovieClip = new MovieClip();				private var _username:String;				private var _starttime:Number = 1100;		private var _endtime:Number = 1200;		private var _captureinterval:Number = 1;		private var _year:String = "2008";		private var _month:String = "07";		private var _day:String = "03";				private var _keys:Array = new Array();				public function queueImages(username:String, gridPositionY:Number) {			// load images from http://yankee.sierrabravo.net/~username/nerdstream/			var loadURL:String = this._DOMAIN + "~" + username + "/nerdstream/";						//this._loader.logLevel = BulkLoader.LOG_INFO;						var i:int;			var filename:String;			var gridPositionX:Number = 0;			var currentImageId:String;						for (i = this._starttime; i <= this._endtime; i += this._captureinterval) {					// we need to pad the timestamp to conform to naming conventions					currentImageId = username + i + ":" + gridPositionX + ":" + gridPositionY;										// TODO:  There must be a better way to do this... wrapping time to next hour after it hits 59 minutes...					if (i == 960) i = 1000;					if (i == 1060) i = 1100;					if (i == 1160) i = 1200;					if (i == 1260) i = 1300;					if (i == 1360) i = 1400;					if (i == 1460) i = 1500;					if (i == 1560) i = 1600;					if (i == 1660) i = 1700;										if (i < 1000) { 						this._loader.add(loadURL + this._year + this._month + this._day + "T0" + i + ".jpg", {id:currentImageId});					}					else {						this._loader.add(loadURL + this._year + this._month + this._day + "T" + i + ".jpg", {id:currentImageId});					}										_loader.get(currentImageId).addEventListener(Event.COMPLETE, onImageLoaded);										//this._keys.push(username+i);					gridPositionX++;			}						this._loader.add(loadURL + "latest.jpg", {id:username+"latest" + ":" + gridPositionX + ":" + gridPositionY});		}				public function startDownloading():void {			// dispatched when any item has progress:            // this._loader.addEventListener(BulkLoader.PROGRESS, onAllItemsProgress);						// dispatched when ALL the items have been loaded:            this._loader.addEventListener(BulkLoader.COMPLETE, onAllItemsLoaded);						// now start the loading            this._loader.start();			this.createScrollableArea();		}				private function createScrollableArea():void {			_sp = new ScrollPane();						_sp.move(_SHOTHEIGHT, _HEADERHEIGHT);			_sp.setSize(1035,495);			_sp.scrollDrag = true;						addChild(_sp);			setChildIndex(_sp, 0); // move it to the back		}				public function drawNameBlock(empName:String, empTitle:String, color:uint, row:Number) {			// this function simply draws a colored block on the appropriate row and fills it with			// the employee name and employee title						var nameBox:Sprite = new Sprite();			nameBox.graphics.beginFill(color);			nameBox.graphics.drawRect(0, _HEADERHEIGHT + (row * _SHOTHEIGHT), _SHOTHEIGHT, _SHOTHEIGHT);			nameBox.graphics.endFill();						addChild(nameBox);						//Add the text labels			var labelName:TextField = new TextField();			var labelTitle:TextField = new TextField();						labelName.text = empName;			labelName.width = _SHOTHEIGHT;			labelName.x = 5;			labelName.y = _HEADERHEIGHT + (row * _SHOTHEIGHT) + 5;			labelName.textColor = 0xFFFFFF;						labelTitle.text = empTitle;			labelTitle.width = _SHOTHEIGHT;			labelTitle.x = 5;			labelTitle.y = _HEADERHEIGHT + (row * _SHOTHEIGHT) + 20;			labelTitle.textColor = 0xFFFFFF;						nameBox.addChild(labelTitle);			nameBox.addChild(labelName);		}				private function onAllItemsLoaded(evt:Event):void {			trace('everthing loaded fine.');						_sp.source = this._imageArea;		}				private function onImageLoaded(e:Event):void {			trace('downloaded ' + e.target.id);						// determine grid position from id (id:col:row);			var shotData:Array = e.target.id.split(":");						var b:Bitmap = _loader.getBitmap(e.target.id);			b.alpha = 0;			b.x = shotData[1] * _SHOTWIDTH;			b.y = shotData[2] * _SHOTHEIGHT;			b.width = _SHOTWIDTH;			b.height = _SHOTHEIGHT;						this._imageArea.addChild(b);			TweenLite.to(b, 1, {alpha:1, ease:Linear.easeIn});			_sp.source = this._imageArea;					}				public function onAllItemsProgress(evt:Event):void {					}					}	}